import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import  fetchCount, { checkUser, updateUser ,signOut} from './authApi';
import { createuser } from './authApi';

const initialState = {
   loggedInuser:null,
  status: 'idle',
   error:null,
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.

export const createUserAsync = createAsyncThunk(
  'user/createuser',
  async (userData) => {
    const response = await createuser(userData);
    // The value we return becomes the `fulfilled` action payload
    return response.data;
  }
);


export const checkUserAsync = createAsyncThunk(
  'user/checkuser',
  async (logininfo) => {
    const response = await checkUser(logininfo);
    // The value we return becomes the `fulfilled` action payload
    return response.data;
  }
);
export const signOutAsync = createAsyncThunk(
  'auth/signOut',
  async (update) => {
    const response = await signOut(update);
    // The value we return becomes the `fulfilled` action payload
    return response.data;
  }
);

export const counterSlice = createSlice({
  name: 'user',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    increment: (state) => {
      // Redux Toolkit allows us to write "mutating" logic in reducers. It
      // doesn't actually mutate the state because it uses the Immer library,
      // which detects changes to a "draft state" and produces a brand new
      // immutable state based off those changes
      state.value += 1;
    }
    
   
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers:(builder)=>{
    builder
     .addCase(createUserAsync.pending,(state,action)=>{
      state.status='loading';

     })
     .addCase(createUserAsync.fulfilled,(state,action)=>{
      state.status='idle';
      state.loggedInuser=action.payload;
     })
     .addCase(checkUserAsync.pending,(state,action)=>{
      state.status='loading';
     })
     .addCase(checkUserAsync.fulfilled,(state,action)=>{
      state.status='idle';
      state.loggedInuser=action.payload;
     })
     .addCase(checkUserAsync.rejected,(state,action)=>{
      state.status='idle';
       state.error=action.error;
     })
     .addCase(signOutAsync.pending,(state,action)=>{
      state.status='pending';
    })
    .addCase(signOutAsync.fulfilled,(state,action)=>{
      state.status='fulfilled';
      state.loggedInuser=null;
    }) 
  }
  
});

export   const { increment} = counterSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`


// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.

export const selectLoggedInUser=(state)=>state.auth.loggedInuser;

export default counterSlice.reducer;
