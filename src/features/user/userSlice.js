import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import fetchLoggedInUserOrders, { fetchLoggedInUser, signOut, updateUser } from './userApi';




const initialState = {
  userOrders: [],
  status: 'idle',
  userInfo:null,
  // this will be used in case of detailed user info ,while
  // auth will be used only for loggedinuser  is etc checks
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const fetchLoggedInUserOrdersAsync = createAsyncThunk(
  'user/fetchLoggedInUserOrders',
  async (Id) => {
    const response = await fetchLoggedInUserOrders(Id);
    // The value we return becomes the `fulfilled` action payload
    return response.data;
  }
);
export const fetchLoggedInUserAsync = createAsyncThunk(
  'user/fetchLoggedInUser',
  async (Id) => {
    const response = await fetchLoggedInUser(Id);
    // The value we return becomes the `fulfilled` action payload
    return response.data;
  }
);
export const updateUserAsync = createAsyncThunk(
  'user/updateUser',
  async (update) => {
    const response = await updateUser(update);
    // The value we return becomes the `fulfilled` action payload
    return response.data;
  }
);

export const userSlice = createSlice({
  name: 'counter',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    increment: (state) => {
      // Redux Toolkit allows us to write "mutating" logic in reducers. It
      // doesn't actually mutate the state because it uses the Immer library,
      // which detects changes to a "draft state" and produces a brand new
      // immutable state based off those changes
      state.value += 1;
    }
   
  },
  extraReducers:(builder)=>{
    builder
    .addCase(fetchLoggedInUserOrdersAsync.pending,(state,action)=>{
        state.status='pending';
    })
    .addCase(fetchLoggedInUserOrdersAsync.fulfilled,(state,action)=>{
      state.status='fullfilled';
      state.userOrders=action.payload;
    })
    .addCase(updateUserAsync.pending,(state,action)=>{
      state.status='pending';
    })
    .addCase(updateUserAsync.fulfilled,(state,action)=>{
      state.status='fulfilled';
      state.userInfo=action.payload;
    })
    .addCase(fetchLoggedInUserAsync.pending,(state,action)=>{
      state.status='pending';
    })
    .addCase(fetchLoggedInUserAsync.fulfilled,(state,action)=>{
      state.status='fulfilled';
      state.userInfo=action.payload;
    }) 
    
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  
});

export   const { increment} = userSlice.actions;


// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`


// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.


export default userSlice.reducer;
