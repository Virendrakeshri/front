import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import fetchCount, { createOrder,fetchAllOrders,updateOrder } from './OrderApi';
import { act } from '@testing-library/react';
const initialState = {
  orders:[],
  status: 'idle',
  currentOrder:null,
  totalOrders:0
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const createOrderAsync = createAsyncThunk(
  'order/createOrder',
  async (order) => {
    const response = await createOrder(order);
    // The value we return becomes the `fulfilled` action payload
    return response.data;
  }
);
export const fetchAllOrdersAsync = createAsyncThunk(
  'order/fetchAllOrders',
  async (pagination) => {
    const response = await fetchAllOrders(pagination);
    // The value we return becomes the `fulfilled` action payload
    return response.data;
  }
);
export const updateOrderAsync = createAsyncThunk(
  'order/updateOrder',
  async (order) => {
    const response = await updateOrder(order);
    // The value we return becomes the `fulfilled` action payload
    return response.data;
  }
);


export const orderSlice = createSlice({
  name: 'order',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    resetOrder:(state)=>{
      state.currentOrder=null;
    },
  },
  extraReducers:(builder)=>{
    builder
    .addCase(createOrderAsync.pending,(state,action)=>{
      state.status="pending";
    })
    .addCase(createOrderAsync.fulfilled,(state,action)=>{
      state.orders.push(action.payload);
      state.status="fulfilled";
       state.currentOrder=action.payload;
    })
    .addCase(fetchAllOrdersAsync.pending,(state,action)=>{
      state.status='pending';
     
    })
    .addCase(fetchAllOrdersAsync.fulfilled,(state,action)=>{
      state.status='fulfilled';
      state.orders=action.payload.orders;
      state.totalOrders=action.payload.totalOrders;
    })
    .addCase(updateOrderAsync.pending,(state,action)=>{
      state.status='pending';
    })
    .addCase(updateOrderAsync.fulfilled,(state,action)=>{
      state.status='idle';
      const index=state.orders.findIndex((order)=>order.id===action.payload.id);
      state.orders[index]=action.payload;
     
    })


  }

  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  
});
export   const {resetOrder} = orderSlice.actions;


// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`


// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.


export default orderSlice.reducer;
